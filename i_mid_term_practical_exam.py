# -*- coding: utf-8 -*-
"""I Mid Term Practical Exam

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10rUtHDWMLGYB1dDccF-bwFRUwzSrQiAl
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import seaborn as sns
import matplotlib.pyplot as plt
from google.colab import files
uploaded =files.upload()

data = pd.read_csv('dataset.csv')

data

data.head()

data.info()

data.drop(['Glucose', 'Age'], axis=1, inplace=True)

data.Gender = [1 if each == 'Male' else 0 for each in data.Gender]

data.sample(5)

plt.figure(figsize=[5,5])
sns.set(style='darkgrid')
ax = sns.countplot(x='Outcome', data=data, palette='Set3')
data.loc[:,'Outcome'].value_counts()

y = data.Outcome.values
x_data = data.drop(['Outcome'], axis=1)

x_data.describe()

x = (x_data - np.min(x_data)) / (np.max(x_data)-np.min(x_data))
x.head()

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.10, random_state=7)

print('x_train shape: ', x_train.shape)
print('y_train shape: ', y_train.shape)
print('x_test shape: ', x_test.shape)
print('y_test shape: ', y_test.shape)

dataset=dataset. fillna(dataset.mean())  
from sklearn.impute import SimpleImputer
imputer = SimpleImputer(missing_values= np.NAN, strategy= 'mean', fill_value=None, verbose=1, copy=True)
#Fitting imputer object to the independent variables x.   
imputer = imputer.fit(dataset.iloc[:, 2:7]) 
#Replacing missing data with the calculated mean value  
dataset.iloc[:, 2:7]= imputer.transform(dataset.iloc[:, 2:7])

from sklearn.linear_model import LogisticRegression
logreg = LogisticRegression()
logreg.fit(x_train, y_train)
y_pred = logreg.predict(X_test)
dataset. fillna(dataset.mean())

from sklearn.metrics import jaccard_similarity_score
print('')
print('Accuracy of the model in jaccard similarity score is = ',
	jaccard_similarity_score(y_test, y_pred))

# Confusion matrix
from sklearn.metrics import confusion_matrix, classification_report

cm = confusion_matrix(y_test, y_pred)
conf_matrix = pd.DataFrame(data = cm,
						columns = ['Predicted:0', 'Predicted:1'],
						index =['Actual:0', 'Actual:1'])
plt.figure(figsize = (8, 5))
sn.heatmap(conf_matrix, annot = True, fmt = 'd', cmap = "Greens")
plt.show()

print('The details for confusion matrix is =')
print (classification_report(y_test, y_pred))

#.